{"version":3,"sources":["components/TodoHead.js","components/TodoItem.js","components/TodoBody.js","components/Todofilter.js","components/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["headWrapStyle","width","height","display","headInnerInputStyle","flex","headAddStyle","backgroundColor","color","fontSize","TodoHead","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","todoValue","onHandleClick","completed","id","setState","alert","handleChange","e","target","value","Date","now","Math","random","join","react_default","a","createElement","style","type","onChange","onClick","React","Component","TodoItem","_ref","todoItem","onHandleToggle","onHandleRemove","data-id","className","TodoBody","todoList","length","map","item","components_TodoItem","handleToggle","handleRemove","key","setClassName","current","TodoFilter","filterAll","filterCompleted","filterUnCompleted","TodoIndex","handleReceiveTodo","todo","concat","toConsumableArray","newTodoList","len","i","splice","handleFilterAll","currentSelect","handleFilterCompleted","handleFilterUnCompleted","data","filter","TodoHead_TodoHead","Todofilter","TodoBody_TodoBody","setFilterTodoList","App","src","logo","alt","components_TodoIndex","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4e805f76.chunk.js","sourcesContent":["import React from 'react'\nconst headWrapStyle = {\n  width: '800px',\n  height: '50px',\n  display: 'flex'\n}\nconst headInnerInputStyle = {\n  flex: '1'\n}\nconst headAddStyle = {\n  width: '100px',\n  backgroundColor: '#bd327f',\n  color: '#fff',\n  fontSize: '16px'\n}\nexport default class TodoHead extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoValue: '',\n      completed: false,\n      id: 0\n    }\n  }\n  handleClick = () => {\n    if (!this.state.todoValue) {\n      alert('不能为空哦')\n      return\n    }\n    this.props.onHandleClick({\n      todoValue: this.state.todoValue,\n      completed: false,\n      id: this.state.id\n    })\n    this.setState({\n      todoValue: '',\n      completed: false,\n      id: 0\n    })\n  }\n  handleChange = (e) => {\n    this.setState({\n      todoValue: e.target.value,\n      id: [Date.now(),  Math.random() * 10000 * 9999].join('-')\n    })\n  }\n  render() {\n    return (\n      <div style={headWrapStyle}>\n        <input\n          type=\"text\"\n          value={this.state.todoValue}\n          onChange={this.handleChange}\n          style={headInnerInputStyle}/>\n        <button\n          onClick={this.handleClick}\n          style={headAddStyle}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}","import React from 'react'\n\nconst TodoItem = ({todoItem, onHandleToggle, onHandleRemove}) => {\n  return (\n    <li data-id={todoItem.id}>\n      <span\n        className={todoItem.completed ? 'active': ''}\n        onClick={onHandleToggle}>{todoItem.todoValue}</span>\n      <button onClick={onHandleRemove}>删除</button>\n    </li>\n  )\n}\nexport default TodoItem","\nimport React from 'react'\nimport TodoItem from './TodoItem';\n\nexport default class TodoBody extends React.Component {\n  render() {\n    return (\n      <ul className=\"todo-body\">\n        {\n          this.props.todoList.length > 0 ? this.props.todoList.map(item => {\n            return (\n              <TodoItem\n                // 此处采坑了，函数，被自己直接调用了\n                onHandleToggle={() => this.props.handleToggle(item)}\n                onHandleRemove={() => this.props.handleRemove(item)}\n                todoItem={item}\n                key={item.id}>\n              </TodoItem>\n            )\n          }) : '啥都没有....'\n        }\n      </ul>\n    )\n  }\n}","import React from 'react'\n\nconst setClassName = (current, type) => {\n  return current === type ? 'active' : ''\n}\nconst TodoFilter = ({current, filterAll, filterCompleted, filterUnCompleted}) => {\n  return (\n    <div className=\"filter-wrap\">\n      <button className={setClassName(current, 'all')} onClick={filterAll}>All</button>\n      <button className={setClassName(current, 'completed')} onClick={filterCompleted}>completed</button>\n      <button className={setClassName(current, 'uncompleted')} onClick={filterUnCompleted}>Uncompleted</button>\n    </div>\n  )\n}\nexport default TodoFilter","import React from 'react';\nimport TodoHead from './TodoHead';\nimport TodoBody from './TodoBody';\nimport TodoFilter from './Todofilter';\n\nimport './index.css';\n\nexport default class TodoIndex extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      /***\n       * all completed uncompleted\n      */\n      currentSelect: 'all'\n    }\n  }\n  handleReceiveTodo = (todo) => {\n    this.setState({\n      todoList: [todo, ...this.state.todoList]\n    })\n  }\n  handleToggle = (todo) => {\n    const newTodoList = [...this.state.todoList].map(item => {\n      if (item.id === todo.id) {\n        item.completed = !item.completed\n        return item\n      }\n      return item\n    })\n    this.setState({\n      todoList: [...newTodoList]\n    })\n  }\n  handleRemove = (todo) => {\n    const newTodoList = [...this.state.todoList]\n    const len = newTodoList.length\n    for (let i = 0; i < len; i++) {\n      if (newTodoList[i].id === todo.id) {\n        newTodoList.splice(i, 1)\n        break\n      }\n    }\n    this.setState({\n      todoList: [...newTodoList]\n    })\n  }\n  setFilterTodoList(type) {\n    const data = [...this.state.todoList]\n    switch (type) {\n      case 'completed':\n        return data.filter(todo => !todo.completed)\n      case 'uncompleted':\n        return data.filter(todo => todo.completed)\n      default:\n        return data\n    }\n  }\n  handleFilterAll = () => {\n    this.setState({\n      currentSelect: 'all'\n    })\n  }\n  handleFilterCompleted = () => {\n    this.setState({\n      currentSelect: 'completed'\n    })\n  }\n  handleFilterUnCompleted = () => {\n    this.setState({\n      currentSelect: 'uncompleted'\n    })\n  }\n  render() {\n    return (\n      <div>\n        <TodoHead onHandleClick={this.handleReceiveTodo} />\n        <TodoFilter\n          filterAll={this.handleFilterAll}\n          filterCompleted={this.handleFilterCompleted}\n          filterUnCompleted={this.handleFilterUnCompleted}\n          current={this.state.currentSelect}/>\n        <TodoBody\n          handleRemove={this.handleRemove}\n          handleToggle={this.handleToggle}\n          todoList={this.setFilterTodoList(this.state.currentSelect)} />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport TodoApp from './components/index';\nimport './App.css';\nimport logo from './logo.svg';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <img className=\"App-logo\" src={logo} alt=\"\"/>\n          <TodoApp />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}